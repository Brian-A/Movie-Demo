(function() {    if (document.readyState!='loading') whenReady();    window.movies = function(id){        // Return an object bound to the ID specified        return (new function(id){            this.id = id;            this.isWatched = function(){                return localStorage.getItem(id) === "1";            };            this.setWatched = function(){                localStorage.setItem(id, "1");                return this;            }            this.setUnwatched = function(){                localStorage.setItem(id, "");                return this;            }            this.toggleWatched = function(){                let newValue = this.isWatched() ? "" : "1";                localStorage.setItem(id, newValue);                return this;            }        }(id));    }    document.addEventListener("DOMContentLoaded", whenReady);    function whenReady(){        updateWatchedUnwatched(); // Update DOM/CSS as required to display watched/unwatched        document.addEventListener('click', (e)=> {            if(e.target.classList.contains('mobileNavToggle') || parentUntilClass(e.target, 'mobileNavToggle')){                document.body.classList.toggle("mobileNavActive");            }            // Handler for clearing search            if (e.target !== document.body && e.target.parentElement.classList.contains("searchControls")) {                let container = e.target.parentElement.parentElement;                container.querySelector('.searchResults').innerHTML = '';                container.classList.remove('displayingResults');            }            // Event handlers for setting movies as watched/unwatched            let target = e.target;            if(e.target.tagName === "I"){ // Avoid mishaps with clicking icon font tags                target = e.target.parentElement;            }            if (target.classList.contains("setWatched")) {                let id = target.parentElement.getAttribute('data-id');                movies(id).setWatched();                if(target.parentElement.classList.contains("setWatchedContainer")){                    target.parentElement.classList.add("watched");                    let card = parentUntilClass(target, "card");                    if(card){                        card.classList.add('watched');                    }                }            }            if (target.classList.contains("setUnwatched")) {                let id = target.parentElement.getAttribute('data-id');                movies(id).setUnwatched();                target.parentElement.classList.remove("watched");                let card = parentUntilClass(target, "card");                if(card){                    card.classList.remove('watched');                }            }        });        function parentUntilClass(elem, className){            while(elem.parentElement !== document.body && !elem.parentElement.classList.contains(className)){                elem = elem.parentElement;            }            return (elem.parentElement === document.body)? false : elem.parentElement;        }        document.addEventListener('keyup', (e)=>{            // Search input AJAX handler - uses event delegation so that we can drop search boxes elsewhere if need be            if(e.target.tagName === "INPUT" && e.target.classList.contains('movieSearch')){                let searchBox = e.target;                let search = searchBox.value;                if(search.length >= 1){ // make sure there's at least one character in the box before searching                    if(searchBox.hasOwnProperty("timeout")) window.clearTimeout(searchBox.timeout);                    // Use a timeout to delay firing off the AJAX request                    searchBox.timeout = window.setTimeout(()=> {                        fetch('/wp-admin/admin-ajax.php?action=search_movies&query=' + encodeURIComponent(search)).then((r) => {                            if (r.ok) {                                r.json().then((res) => {                                    // Render results to DOM                                    let results = res['results'];                                    let list = document.createElement("ul");                                    list.classList.add("searchResults");                                    for (let i = 0; i < results.length && i < 10; i++) {                                        let movie = results[i];                                        let item = document.createElement("li");                                        let link = document.createElement("a");                                        item.appendChild(link);                                        link.innerText = movie.title;                                        link.setAttribute("href", "/movie/?movieID=" + movie.id);                                        list.appendChild(item);                                    }                                    let resultsContainer = searchBox.parentElement.querySelector(".searchResults");                                    searchBox.parentElement.classList.add("displayingResults");                                    resultsContainer.innerHTML = ""; // Blow away the old search                                    resultsContainer.appendChild(list);                                });                            }                        });                    }, 200);                }            }        });    }    function updateWatchedUnwatched(){        // This updates any elements that may have client side behaviors relating to flagging movies as watched/unwatched        // reset the page        let watched = document.querySelectorAll(".watched");        for(let i = 0; i < watched.length; i++){            watched[i].classList.remove("watched");        }        for(let i = 0; i < localStorage.length; i++){            let key = localStorage.key(i);            // We only worry about watched as we've already removed any unwatched and JS/CSS expects unwatched as default            if(localStorage.getItem(key) === "1"){                let items = document.querySelectorAll("[data-id='" + key + "']");                for(let i = 0; i < items.length; i++){                     items[i].classList.add('watched');                }            }        }    }    // This interval just makes sure that the UI remains in a consistent state    // when navigating via history as the "correct" solutions weren't behaving.    setInterval(()=>{        updateWatchedUnwatched();    }, 2000);})();